package br.com.mvbos.ame;

import br.com.mvbos.ame.util.GridValue;
import br.com.mvbos.ame.util.ProjectObject;
import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.GridLayout;

import java.awt.Point;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.MouseMotionListener;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.LinkedHashMap;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JComponent;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTabbedPane;
import javax.swing.Timer;
import javax.swing.filechooser.FileFilter;

/**
 *
 * @author Marcus Becker
 */
public class Window extends javax.swing.JFrame {

    private final Timer timer;

    private final CodeWindow cw = new CodeWindow();

    private JButton selected;
    //private JButton selected;

    public static final GridValue defaultValue = new GridValue(-1, "", null);

    private int index;
    private final List<GridValue[][]> gridValuesList = new ArrayList<>(10);

    private Point size = new Point(810, 600);

    private Point pxy = new Point(0, 0);

    public static final Color front = Color.LIGHT_GRAY;
    public static final Color back = new Color(248, 248, 248);
    public static final Color line = new Color(0, 153, 255);
    public static final Color fill = Color.DARK_GRAY;

    private ProjectObject po = new ProjectObject();

    //private final List<JButton> buttonValues = new ArrayList<>(20);
    //private char[] copy;// = new char[18];
    //private Point start;
    //private Point end;
    /**
     * Creates new form Window
     */
    public Window() {
        initComponents();

        timer = new Timer(100, new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                canvas.repaint();
            }
        });

        timer.start();
        updateLabels();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        canvas = createCanvas();
        jPanel3 = new javax.swing.JPanel();
        tfGridWid = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        tfGridHei = new javax.swing.JTextField();
        btnLeft = new javax.swing.JButton();
        btnRigth = new javax.swing.JButton();
        btnRemove = new javax.swing.JButton();
        btnAdd = new javax.swing.JButton();
        btnFillLine = new javax.swing.JToggleButton();
        btnFillColumn = new javax.swing.JToggleButton();
        lblIdx = new javax.swing.JLabel();
        lblCount = new javax.swing.JLabel();
        lblValueSelected = new javax.swing.JLabel();
        btnEmptyLinCol = new javax.swing.JToggleButton();
        tabValues = new javax.swing.JTabbedPane();
        pnDefault = new javax.swing.JPanel();
        btnFill = new javax.swing.JToggleButton();
        btnAddTab = new javax.swing.JButton();
        btnAddColors = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        lblPosition = new javax.swing.JLabel();
        btnCode = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        miNewGrid = new javax.swing.JMenuItem();
        miOpen = new javax.swing.JMenuItem();
        miSave = new javax.swing.JMenuItem();
        sep = new javax.swing.JPopupMenu.Separator();
        miExit = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 840, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 42, Short.MAX_VALUE)
        );

        canvas.setBackground(new java.awt.Color(0, 153, 204));

        javax.swing.GroupLayout canvasLayout = new javax.swing.GroupLayout(canvas);
        canvas.setLayout(canvasLayout);
        canvasLayout.setHorizontalGroup(
            canvasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        canvasLayout.setVerticalGroup(
            canvasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        tfGridWid.setText("0");

        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText(" x ");

        tfGridHei.setText("0");

        btnLeft.setText("<");
        btnLeft.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLeftActionPerformed(evt);
            }
        });

        btnRigth.setText(">");
        btnRigth.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRigthActionPerformed(evt);
            }
        });

        btnRemove.setText("-");
        btnRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveActionPerformed(evt);
            }
        });

        btnAdd.setText("+");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        btnFillLine.setText("--");

        btnFillColumn.setText("|");

        lblIdx.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblIdx.setText("100");

        lblCount.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblCount.setText("100");

        lblValueSelected.setText("Value selected");

        btnEmptyLinCol.setText("#");
        btnEmptyLinCol.setToolTipText("Clear");

        tabValues.setTabLayoutPolicy(javax.swing.JTabbedPane.SCROLL_TAB_LAYOUT);

        pnDefault.setBackground(new java.awt.Color(204, 204, 204));
        pnDefault.setName("pnDefault"); // NOI18N
        pnDefault.setLayout(new java.awt.GridLayout(2, 3));
        tabValues.addTab("Default", pnDefault);

        btnFill.setText("Fill");

        btnAddTab.setText("+ Tiles");
        btnAddTab.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddTabActionPerformed(evt);
            }
        });

        btnAddColors.setText("+ Colors");
        btnAddColors.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddColorsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnFill, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblValueSelected, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(btnLeft)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblIdx, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnRigth))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(btnFillLine)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnFillColumn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 66, Short.MAX_VALUE)
                        .addComponent(btnEmptyLinCol))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(tfGridWid)
                            .addComponent(btnAdd, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblCount, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(tfGridHei)
                            .addComponent(btnRemove, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(btnAddColors)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnAddTab))
            .addComponent(tabValues, javax.swing.GroupLayout.Alignment.TRAILING)
        );

        jPanel3Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {btnAdd, btnLeft, btnRemove, btnRigth});

        jPanel3Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {btnEmptyLinCol, btnFillColumn, btnFillLine});

        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAddTab)
                    .addComponent(btnAddColors))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tabValues, javax.swing.GroupLayout.DEFAULT_SIZE, 210, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblValueSelected)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnFill)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnFillLine)
                    .addComponent(btnFillColumn)
                    .addComponent(btnEmptyLinCol))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnLeft)
                    .addComponent(btnRigth)
                    .addComponent(lblIdx))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAdd)
                    .addComponent(btnRemove)
                    .addComponent(lblCount))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tfGridWid, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(tfGridHei, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jPanel3Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {btnAdd, btnEmptyLinCol, btnFillColumn, btnFillLine, btnLeft, btnRemove, btnRigth});

        lblPosition.setText("0,0");

        btnCode.setText("View code");
        btnCode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCodeActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblPosition, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnCode)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblPosition)
                    .addComponent(btnCode))
                .addContainerGap(15, Short.MAX_VALUE))
        );

        jMenu1.setText("File");

        miNewGrid.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        miNewGrid.setText("New");
        miNewGrid.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miNewGridActionPerformed(evt);
            }
        });
        jMenu1.add(miNewGrid);

        miOpen.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        miOpen.setText("Open");
        miOpen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miOpenActionPerformed(evt);
            }
        });
        jMenu1.add(miOpen);

        miSave.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        miSave.setText("Save");
        miSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miSaveActionPerformed(evt);
            }
        });
        jMenu1.add(miSave);
        jMenu1.add(sep);

        miExit.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_W, java.awt.event.InputEvent.CTRL_MASK));
        miExit.setText("Exit");
        miExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miExitActionPerformed(evt);
            }
        });
        jMenu1.add(miExit);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");
        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(canvas, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(canvas, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed

        gridValuesList.add(newGrid(po.getGrid()));
        index++;

        updateLabels();

    }//GEN-LAST:event_btnAddActionPerformed

    private void btnLeftActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLeftActionPerformed

        go(-1);

    }//GEN-LAST:event_btnLeftActionPerformed

    private void btnRigthActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRigthActionPerformed

        go(1);

    }//GEN-LAST:event_btnRigthActionPerformed

    private void btnRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveActionPerformed

        removeGrid();

    }//GEN-LAST:event_btnRemoveActionPerformed

    private void btnCodeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCodeActionPerformed

        viewCode();

    }//GEN-LAST:event_btnCodeActionPerformed


    private void miNewGridActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miNewGridActionPerformed

        addNewGrid();

    }//GEN-LAST:event_miNewGridActionPerformed

    private void btnAddTabActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddTabActionPerformed

        addTilesGrid();

    }//GEN-LAST:event_btnAddTabActionPerformed

    private void btnAddColorsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddColorsActionPerformed

        addColorsGrid();

    }//GEN-LAST:event_btnAddColorsActionPerformed

    private void miSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miSaveActionPerformed

        save();

    }//GEN-LAST:event_miSaveActionPerformed

    private void miOpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miOpenActionPerformed

        JFileChooser fc = new JFileChooser(Paths.get("").toAbsolutePath().toString());
        fc.setFileFilter(new FileFilter() {

            @Override
            public boolean accept(File f) {
                return f.isFile() && f.getName().toLowerCase().endsWith(".ame");
            }

            @Override
            public String getDescription() {
                return "*.ame";
            }
        });

        if (fc.showOpenDialog(this) == JFileChooser.OPEN_DIALOG) {
            load(fc.getSelectedFile());
        }

    }//GEN-LAST:event_miOpenActionPerformed

    private void miExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miExitActionPerformed

        dispose();
        System.exit(1);

    }//GEN-LAST:event_miExitActionPerformed

    private JButton createButton(GridValue gv) {
        JButton btn;

        btn = new JButton();

        if (gv.getImageIcon() != null) {
            btn.setName(gv.getPlain());
            btn.setIcon(gv.getImageIcon());
            btn.setToolTipText(String.format("Value: %s", getText(btn)));
        } else {
            btn.setText(gv.getPlain());
        }

        if (gv.getColor() != null) {
            btn.setBackground(gv.getColor());
        }

        btn.addActionListener(new java.awt.event.ActionListener() {
            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectValue((JButton) evt.getSource());
            }
        });

        return btn;
    }

    private void setDefaultButton(GridValue gv) {
        defaultValue.setPlain(gv.getPlain());
        defaultValue.setColor(gv.getColor());
        defaultValue.setImageIcon(gv.getImageIcon());
    }

    private void load(File file) {

        ProjectObject temp = null;

        try (ObjectInputStream in = new ObjectInputStream(new FileInputStream(file))) {
            temp = (ProjectObject) in.readObject();
        } catch (Exception ex) {
            Logger.getLogger(Window.class.getName()).log(Level.SEVERE, null, ex);
        }

        if (temp == null) {
            return;
        }

        configureNewProject(temp);
        setDefaultButton(temp.getDefaultValue());

        JButton btn = createButton(defaultValue);
        btn.setName("defaultButton");
        pnDefault.add(btn);

        Map<String, JPanel> tt = new LinkedHashMap<>(temp.getValues().size());

        //Map<String, GridValue> tt = new LinkedHashMap<>(temp.getValues().size());
        for (GridValue gv : temp.getValues()) {
            if (pnDefault.getName().equals(gv.getTabName()) || tt.containsKey(gv.getTabName())) {
                continue;
            }

            JPanel pn = new JPanel();
            tt.put(gv.getTabName(), pn);

            tabValues.add(gv.getTabName(), pn);
        }

        //
        addPlainValues(temp.getValues());

        gridValuesList.addAll(temp.getGrids());

        temp.getValues().clear();
        temp.getGrids().clear();

    }

    private void save() {
        po.setDefaultValue(defaultValue);
        po.setGrids(gridValuesList);

        for (JPanel tab : getPanels(tabValues)) {
            for (JButton btn : getButtons(tab)) {

                if ("defaultButton".equals(btn.getName())) {
                    continue;
                }

                GridValue gv = createNewValue((JButton) btn);
                gv.setTabName(tab.getName());
                po.getValues().add(gv);
            }
        }

        try (ObjectOutputStream out = new ObjectOutputStream(new FileOutputStream(po.getName() + ".ame"))) {
            out.writeObject(po);
        } catch (IOException ex) {
            Logger.getLogger(Window.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    public enum TabNames {

        DEFAULT("Default"), TILES("Tiles"), COLORS("Colors");
        private final String name;

        private TabNames(String name) {
            this.name = name;
        }

        public String getName() {
            return name;
        }

    }

    private void addColorsGrid() {
        ColorsMapJDialog dialog = new ColorsMapJDialog(this, true);
        dialog.setLocationRelativeTo(this);
        dialog.setVisible(true);

        if (!dialog.isOk()) {
            return;
        }

        int listSize = dialog.getList().size();

        JPanel newPanel = new JPanel();
        newPanel.setName(TabNames.COLORS.getName());
        newPanel.setLayout(new GridLayout(listSize / 5, listSize / 10));

        for (GridValue gv : dialog.getList()) {
            JButton b = createButton(gv);
            b.setName("color");
            newPanel.add(b);
        }

        tabValues.addTab(newPanel.getName(), newPanel);
        tabValues.setSelectedIndex(tabValues.getTabCount() - 1);

        super.pack();
    }

    private void addTilesGrid() {
        TilesMapJDialog dialog = new TilesMapJDialog(this, true);
        dialog.setLocationRelativeTo(this);
        dialog.setVisible(true);

        if (!dialog.isOk()) {
            return;
        }

        int listSize = dialog.getList().size();

        JPanel newPanel = new JPanel();
        newPanel.setName(TabNames.TILES.getName());
        newPanel.setLayout(new GridLayout(listSize / 5, listSize / 10));

        for (GridValue gv : dialog.getList()) {
            JButton b = createButton(gv);
            b.setName("tile");
            newPanel.add(b);
        }

        /*for (JButton b : buttonValues) {
         newPanel.add(b);
         }*/
        tabValues.addTab(newPanel.getName(), newPanel);
        tabValues.setSelectedIndex(tabValues.getTabCount() - 1);

        super.pack();
    }

    private void configureNewProject(ProjectObject po) {
        //clean
        for (JPanel tabs : getPanels(tabValues)) {
            //Remove buttons
            tabs.removeAll();

            if (!pnDefault.getName().equals(tabs.getName())) {
                tabValues.remove(tabs);
            }
        }

        //clean grid
        gridValuesList.clear();

        //update variables
        this.po = po;
        tfGridWid.setText(String.valueOf(po.getGrid().width));
        tfGridHei.setText(String.valueOf(po.getGrid().height));
    }

    private void addNewGrid() {
        NewGridJDialog dialog = new NewGridJDialog(this, true);
        dialog.setLocationRelativeTo(this);
        dialog.setVisible(true);

        if (!dialog.isOk()) {
            return;
        }

        ProjectObject temp = new ProjectObject();
        temp.setName(dialog.getProjectName());
        temp.setDefaultValue(dialog.getDefaultValue());
        temp.setGrid(new Dimension(dialog.getGridWidth(), dialog.getGridHeight()));

        setDefaultButton(dialog.getDefaultValue());
        configureNewProject(temp);

        //Create grid with default value for all fields
        gridValuesList.add(newGrid(po.getGrid()));

        JButton btn = createButton(defaultValue);
        btn.setName("defaultButton");
        pnDefault.add(btn);

        addPlainValues(dialog.getValues());
    }

    private void addPlainValues(List<GridValue> values) {
        int col = (values.size() + 1) / 2;
        int row = values.size() / 2;

        if (col == 0) {
            col = 1;
        }

        pnDefault.setLayout(new GridLayout(col, row));

        //add buttons
        for (GridValue g : values) {
            pnDefault.add(createButton(g));
        }

        pnDefault.updateUI();

    }

    private String getText(JButton btn) {
        return btn.getText() == null || btn.getText().isEmpty() ? btn.getName() : btn.getText();
    }

    private ImageIcon getImage(JButton btn) {
        return btn.getIcon() != null ? (ImageIcon) btn.getIcon() : null;
    }

    private void selectValue(JButton btn) {
        selected = btn;
        lblValueSelected.setText(String.format("Value selected: %s", getText(btn)));
    }

    private JPanel createCanvas() {

        JPanel c = new JPanel() {

            @Override
            public void paint(Graphics g) {
                if (gridValuesList.isEmpty()) {
                    super.paint(g);
                    return;
                }

                Dimension grid = po.getGrid();

                size.x = getWidth();
                size.y = getHeight();

                int x = size.x / grid.width;
                int y = size.y / grid.height;

                int sp = x / 4;

                //System.out.printf("x %d y %d - px %d py %d\n", x, y, getWidth(), getHeight());
                g.setColor(back);
                g.fillRect(0, 0, getWidth(), getHeight());

                GridValue[][] gridArray = gridValuesList.get(index);

                g.setColor(fill);

                for (int col = 0; col < gridArray.length; col++) {
                    for (int lin = 0; lin < gridArray[0].length; lin++) {
                        GridValue value = gridArray[col][lin];

                        int fSize = x / 3;
                        g.setFont(new Font("arial", Font.PLAIN, fSize));

                        if (value.equals(defaultValue)) {
                            g.drawString(value.getPlain(), col * x + fSize, lin * y + fSize);

                        } else {

                            if (btnFill.isSelected()) {

                                if (value.isImage()) {
                                    g.drawImage(value.getImage(), col * x, lin * y, null);

                                } else {
                                    g.setColor(value.getColor() != null ? value.getColor() : fill);
                                    g.fillRect(col * x, lin * y, x, y);

                                    g.setColor(back);
                                    g.drawString(value.getPlain(), col * x + fSize, lin * y + fSize);
                                }

                            } else {
                                /*if (" ".equals(value)) 
                                 g.drawString("[]", col * x + x / 2, lin * y + y / 2);*/
                                g.drawString(value.getPlain(), col * x + fSize, lin * y + fSize);
                            }
                        }
                    }
                }

                g.setColor(line);

                for (int i = 0; i < size.x; i += x) {
                    g.drawLine(i, 0, i, size.y);
                }

                for (int i = 0; i < size.y; i += y) {
                    g.drawLine(0, i, size.x, i);
                }

                g.setColor(front);
                //int px = e.getPoint().x / x;
                //int py = e.getPoint().y / y;

                if (btnFill.isSelected() && selected != null && getImage(selected) != null) {
                    g.drawImage(getImage(selected).getImage(), pxy.x - x / 2 + sp, pxy.y - y / 2 + sp, null);
                } else {
                    g.drawRect(pxy.x - x / 2 + sp, pxy.y - y / 2 + sp, x - sp, y - sp);
                }

                if (btnFillLine.isSelected()) {
                    for (int i = 0; i < getWidth(); i += x) {
                        g.drawRect(i + sp, pxy.y - y / 2 + sp, x / 2, y / 2);
                    }
                }

                if (btnFillColumn.isSelected()) {
                    for (int i = 0; i < getHeight(); i += y) {
                        g.drawRect(pxy.x - x / 2 + sp, i + sp, x / 2, y / 2);
                    }
                }

                /*TODO on mouse press;
                 if (start != null) {
                 //System.out.print("start " + start);
                 //System.out.println(" pxy " + pxy);

                 int temp = (pxy.y - start.y) / 18;
                 int tt = 0;
                 //System.out.println("te " + temp);
                 for (int i = start.x; i < pxy.x; i += x) {
                 //g.drawRect(i - x / 2 + sp, i - y / 2 + sp, x - sp, y - sp);
                 g.drawRect(i - x / 2 + sp, start.y + tt * temp, x - sp, y - sp);
                 tt++;
                 }
                 } {

                 }*/
            }

        };

        c.addMouseListener(new MouseListener() {

            @Override
            public void mouseClicked(MouseEvent e) {
                if (selected == null) {
                    return;
                }

                Dimension grid = po.getGrid();
                int x = size.x / grid.width;
                int y = size.y / grid.height;

                int px = e.getPoint().x / x;
                int py = e.getPoint().y / y;

                if (e.getButton() == MouseEvent.BUTTON1) {
                    GridValue[][] gridArray = gridValuesList.get(index);

                    //System.out.printf("x %d y %d - px %d py %d\n", x, y, px, py);
                    if (!isValid(px, py, gridArray)) {
                        return;
                    }

                    if (btnFillLine.isSelected() || btnFillColumn.isSelected()) {

                        if (btnFillLine.isSelected()) {
                            for (int i = 0; i < gridArray.length; i++) {
                                gridArray[i][py] = btnEmptyLinCol.isSelected() ? defaultValue : createNewValue(selected);

                            }
                        }

                        if (btnFillColumn.isSelected()) {
                            for (int i = 0; i < gridArray[0].length; i++) {
                                gridArray[px][i] = btnEmptyLinCol.isSelected() ? defaultValue : createNewValue(selected);
                            }
                        }

                    } else {
                        /*GridValue temp;
                         if(gridArray[px][py] == defaultValue){
                         temp = new GridValue(0, getText(selected), getImage(selected));
                         }else if (gridArray[px][py].equals(null)){
                         temp = defaultValue;
                         }else{
                         temp = new GridValue(0, getText(selected), getImage(selected);
                         }
                         gridArray[px][py] = temp;*/
                        gridArray[px][py] = defaultValue.equals(gridArray[px][py]) ? createNewValue(selected) : defaultValue;

                        //System.out.println("defVal " + defVal);
                        //System.out.println("valSel " + valSel);
                        //System.out.println("gridArray[px][py] " + gridArray[px][py]);
                    }
                }
            }

            @Override
            public void mousePressed(MouseEvent e) {
                //start = e.getPoint();
            }

            @Override
            public void mouseReleased(MouseEvent e) {
                //start = null;
                //end = e.getPoint();
            }

            @Override
            public void mouseEntered(MouseEvent e) {
                //System.out.print("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
            }

            @Override
            public void mouseExited(MouseEvent e) {
                //System.out.print("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
            }

        });

        c.addMouseMotionListener(new MouseMotionListener() {

            @Override
            public void mouseDragged(MouseEvent e) {
                pxy = e.getPoint();
                updateMousePosition();
            }

            @Override
            public void mouseMoved(MouseEvent e) {
                pxy = e.getPoint();
                updateMousePosition();
            }
        });

        return c;
    }

    private GridValue createNewValue(JButton selected) {
        GridValue g = new GridValue(0, getText(selected), getImage(selected));

        if ("color".equals(selected.getName())) {
            g.setColor(selected.getBackground());
        }

        return g;
    }

    private void updateMousePosition() {
        Dimension grid = po.getGrid();

        if (grid == null || grid.width == 0 || grid.height == 0) {
            return;
        }

        int px = pxy.x / (size.x / grid.width);
        int py = pxy.y / (size.y / grid.height);

        if (px >= grid.width || py >= grid.height) {
            lblPosition.setForeground(Color.RED);
        } else {
            lblPosition.setForeground(Color.BLACK);
        }

        lblPosition.setText(String.format("lin %d, col %d", py, px));
    }

    private boolean isValid(int px, int py, Object[][] gridArray) {
        return px >= 0 && px < gridArray.length && py >= 0 && py < gridArray[0].length;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnAddColors;
    private javax.swing.JButton btnAddTab;
    private javax.swing.JButton btnCode;
    private javax.swing.JToggleButton btnEmptyLinCol;
    private javax.swing.JToggleButton btnFill;
    private javax.swing.JToggleButton btnFillColumn;
    private javax.swing.JToggleButton btnFillLine;
    private javax.swing.JButton btnLeft;
    private javax.swing.JButton btnRemove;
    private javax.swing.JButton btnRigth;
    private javax.swing.JPanel canvas;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JLabel lblCount;
    private javax.swing.JLabel lblIdx;
    private javax.swing.JLabel lblPosition;
    private javax.swing.JLabel lblValueSelected;
    private javax.swing.JMenuItem miExit;
    private javax.swing.JMenuItem miNewGrid;
    private javax.swing.JMenuItem miOpen;
    private javax.swing.JMenuItem miSave;
    private javax.swing.JPanel pnDefault;
    private javax.swing.JPopupMenu.Separator sep;
    private javax.swing.JTabbedPane tabValues;
    private javax.swing.JTextField tfGridHei;
    private javax.swing.JTextField tfGridWid;
    // End of variables declaration//GEN-END:variables

    private void go(int id) {
        int t = index + id;

        if (t < 0) {
            t = gridValuesList.size() - 1;
        } else if (t == gridValuesList.size()) {
            t = 0;
        }

        index = t;
        updateLabels();
    }

    private void updateLabels() {
        lblCount.setText(String.valueOf(gridValuesList.size()));
        lblIdx.setText(String.valueOf(index + 1));
    }

    private void removeGrid() {
        int res = JOptionPane.showConfirmDialog(this, String.format("Remove grid %d?", index + 1), "Remove Confirm", JOptionPane.YES_NO_OPTION);
        if (res == JOptionPane.OK_OPTION) {
            if (gridValuesList.size() > 1) {
                gridValuesList.remove(index);
                go(-1);
            } else {
                gridValuesList.set(index, newGrid(po.getGrid()));
            }
        }
    }

    private void viewCode() {
        cw.setList(gridValuesList);
        cw.setVisible(true);
    }

    private GridValue[][] newGrid(Dimension grid) {
        GridValue[][] arr = new GridValue[grid.width][grid.height];

        for (GridValue[] a : arr) {
            for (int j = 0; j < a.length; j++) {
                a[j] = defaultValue;
            }
        }

        return arr;
    }

    private Iterable<JTabbedPane> getTabs(JComponent comp) {
        List<JTabbedPane> l = new ArrayList<>(comp.getComponentCount());
        for (Component c : comp.getComponents()) {
            if (c instanceof JTabbedPane) {
                l.add((JTabbedPane) c);
            }
        }

        return l;
    }

    private Iterable<JPanel> getPanels(JComponent comp) {
        List<JPanel> l = new ArrayList<>(comp.getComponentCount());
        for (Component c : comp.getComponents()) {
            if (c instanceof JPanel) {
                l.add((JPanel) c);
            }
        }

        return l;
    }

    private Iterable<JButton> getButtons(JComponent comp) {
        List<JButton> l = new ArrayList<>(comp.getComponentCount());
        for (Component c : comp.getComponents()) {
            if (c instanceof JButton) {
                l.add((JButton) c);
            }
        }

        return l;
    }
}
